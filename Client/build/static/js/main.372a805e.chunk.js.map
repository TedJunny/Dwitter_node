{"version":3,"sources":["components/Header.jsx","components/Banner.jsx","components/NewTweetForm.jsx","util/date.js","components/Avatar.jsx","components/EditTweetForm.jsx","components/TweetCard.jsx","pages/Login.jsx","context/AuthContext.jsx","components/Tweets.jsx","pages/AllTweets.jsx","pages/MyTweets.jsx","App.jsx","service/auth.js","service/tweet.js","network/http.js","db/token.js","network/socket.js","index.js"],"names":["Header","memo","username","onLogout","onMyTweets","onAllTweets","className","src","alt","onClick","Banner","text","isAlert","NewTweetForm","tweetService","onError","useState","tweet","setTweet","onSubmit","event","a","preventDefault","postTweet","then","created","catch","type","placeholder","value","required","autoFocus","onChange","target","parseDate","tdate","Date","parse","now","diff","Math","floor","round","month","toLocaleDateString","getDate","Avatar","url","name","charAt","EditTweetForm","onUpdate","onClose","setText","id","TweetCard","owner","onDelete","onUsernameClick","createdAt","editing","setEditing","Login","onSignUp","onLogin","signup","setSignup","setUsername","password","setPassword","setName","email","setEmail","setURL","setIsAlert","setError","error","toString","checked","htmlFor","AuthContext","createContext","contextRef","createRef","AuthProvider","authService","authErrorEventBus","children","undefined","user","setUser","useImperativeHandle","token","useEffect","listen","err","console","log","me","signUp","useCallback","logIn","login","logout","context","useMemo","Provider","AuthErrorEventBus","callback","this","useAuth","useContext","Tweets","addable","tweets","setTweets","history","useHistory","getTweets","stopSync","onSync","onCreated","tweetId","deleteTweet","filter","updateTweet","updated","map","item","push","setTimeout","transient","length","AllTweets","MyTweets","useParams","App","window","confirm","exact","path","AuthService","http","tokenStorage","fetch","method","body","JSON","stringify","data","saveToken","getToken","headers","Authorization","clearToken","TweetService","socket","query","getHeaders","HttpClient","baseURL","options","res","json","status","message","Error","notify","TOKEN","TokenStorage","localStorage","setItem","getItem","clear","Socket","getAccessToken","io","auth","cb","on","connected","connect","off","process","httpClient","socketClient","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.372a805e.chunk.js","sourcesContent":["import React, { memo } from 'react';\n\nconst Header = memo(({ username, onLogout, onMyTweets, onAllTweets }) => {\n  return (\n    <header className='header'>\n      <div className='logo'>\n        <img src='./img/logo.png' alt='Dwitter Logo' className='logo-img' />\n        <h1 className='logo-name'>Dwitter</h1>\n        {username && <span className='logo-user'>@{username}</span>}\n      </div>\n      {username && (\n        <nav className='menu'>\n          <button onClick={onAllTweets}>All Tweets</button>\n          <button onClick={onMyTweets}>My Tweets</button>\n          <button className='menu-item' onClick={onLogout}>\n            Logout\n          </button>\n        </nav>\n      )}\n    </header>\n  );\n});\n\nexport default Header;\n","import React, { memo } from 'react';\n\nconst Banner = memo(({ text, isAlert }) => (\n  <>\n    {text && (\n      <p className={`banner ${isAlert ? 'banner-red' : 'banner-green'}`}>\n        {text}\n      </p>\n    )}\n  </>\n));\nexport default Banner;\n","import React, { useState } from 'react';\n\nconst NewTweetForm = ({ tweetService, onError }) => {\n  const [tweet, setTweet] = useState('');\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    tweetService\n      .postTweet(tweet)\n      .then((created) => {\n        setTweet('');\n      })\n      .catch(onError);\n  };\n\n  const onChange = (event) => {\n    setTweet(event.target.value);\n  };\n\n  return (\n    <form className='tweet-form' onSubmit={onSubmit}>\n      <input\n        type='text'\n        placeholder='Edit your tweet'\n        value={tweet}\n        required\n        autoFocus\n        onChange={onChange}\n        className='form-input tweet-input'\n      />\n      <button type='submit' className='form-btn'>\n        Post\n      </button>\n    </form>\n  );\n};\n\nexport default NewTweetForm;\n","export default function parseDate(tdate) {\n  const created = new Date(Date.parse(tdate));\n  const now = new Date();\n  const diff = Math.floor((now - created) / 1000);\n  if (diff <= 1) {\n    return 'just now';\n  }\n  if (diff < 20) {\n    return diff + ' seconds ago';\n  }\n  if (diff < 40) {\n    return 'half a minute ago';\n  }\n  if (diff < 60) {\n    return 'less than a minute ago';\n  }\n  if (diff <= 90) {\n    return 'one minute ago';\n  }\n  if (diff <= 3540) {\n    return Math.round(diff / 60) + ' minutes ago';\n  }\n  if (diff <= 5400) {\n    return '1 hour ago';\n  }\n  if (diff <= 86400) {\n    return Math.round(diff / 3600) + ' hours ago';\n  }\n  if (diff <= 129600) {\n    return '1 day ago';\n  }\n  if (diff < 604800) {\n    return Math.round(diff / 86400) + ' days ago';\n  }\n  if (diff <= 777600) {\n    return '1 week ago';\n  }\n  const month = created.toLocaleDateString('default', { month: 'long' });\n  return `on ${month} ${created.getDate()}`;\n}\n","import React, { memo } from 'react';\n\nconst Avatar = memo(({ url, name }) => (\n  <div>\n    {!!url ? (\n      <img src={url} alt='avatar' className='avatar-img' />\n    ) : (\n      <div className='avatar-txt'>{name.charAt(0)}</div>\n    )}\n  </div>\n));\n\nexport default Avatar;\n","import React, { useState } from 'react';\n\nconst EditTweetForm = ({ tweet, onUpdate, onClose }) => {\n  const [text, setText] = useState(tweet.text);\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    onUpdate(tweet.id, text);\n    onClose();\n  };\n\n  const onChange = (event) => {\n    setText(event.target.value);\n  };\n\n  return (\n    <form className='edit-tweet-form' onSubmit={onSubmit}>\n      <input\n        type='text'\n        placeholder='Edit your tweet'\n        value={text}\n        required\n        autoFocus\n        onChange={onChange}\n        className='form-input tweet-input'\n      />\n      <div className='edit-tweet-form-action'>\n        <button type='submit' className='form-btn-update'>\n          Update\n        </button>\n        <button type='button' className='form-btn-cancel' onClick={onClose}>\n          Cancel\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default EditTweetForm;\n","import React, { memo, useState } from 'react';\nimport parseDate from '../util/date';\nimport Avatar from './Avatar';\nimport EditTweetForm from './EditTweetForm';\n\nconst TweetCard = memo(\n  ({ tweet, owner, onDelete, onUpdate, onUsernameClick }) => {\n    const { id, username, name, url, text, createdAt } = tweet;\n    const [editing, setEditing] = useState(false);\n    const onClose = () => setEditing(false);\n\n    return (\n      <li className='tweet'>\n        <section className='tweet-container'>\n          <Avatar url={url} name={name} />\n          <div className='tweet-body'>\n            <span className='tweet-name'>{name}</span>\n            <span\n              className='tweet-username'\n              onClick={() => onUsernameClick(tweet)}\n            >\n              @{username}\n            </span>\n            <span className='tweet-date'> · {parseDate(createdAt)}</span>\n            <p>{text}</p>\n            {editing && (\n              <EditTweetForm\n                tweet={tweet}\n                onUpdate={onUpdate}\n                onClose={onClose}\n              />\n            )}\n          </div>\n        </section>\n        {owner && (\n          <div className='tweet-action'>\n            <button className='tweet-action-btn' onClick={() => onDelete(id)}>\n              x\n            </button>\n            <button\n              className='tweet-action-btn'\n              onClick={() => setEditing(true)}\n            >\n              ✎\n            </button>\n          </div>\n        )}\n      </li>\n    );\n  }\n);\nexport default TweetCard;\n","import React, { useState } from 'react';\nimport Banner from '../components/Banner';\n\nconst Login = ({ onSignUp, onLogin }) => {\n  const [signup, setSignup] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [url, setURL] = useState('');\n  const [text, setText] = useState('');\n  const [isAlert, setIsAlert] = useState(false);\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    if (signup) {\n      onSignUp(username, password, name, email, url).catch(setError);\n    } else {\n      onLogin(username, password).catch(setError);\n    }\n  };\n\n  const setError = (error) => {\n    setText(error.toString());\n    setIsAlert(true);\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { name, value, checked },\n    } = event;\n    switch (name) {\n      case 'username':\n        return setUsername(value);\n      case 'password':\n        return setPassword(value);\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'url':\n        return setURL(value);\n      case 'signup':\n        return setSignup(checked);\n      default:\n    }\n  };\n\n  return (\n    <>\n      <Banner text={text} isAlert={isAlert} />\n      <form className='auth-form' onSubmit={onSubmit}>\n        <input\n          name='username'\n          type='text'\n          placeholder='Id'\n          value={username}\n          onChange={onChange}\n          className='form-input'\n          required\n        />\n        <input\n          name='password'\n          type='password'\n          placeholder='Password'\n          value={password}\n          className='form-input'\n          onChange={onChange}\n        />\n        {signup && (\n          <input\n            name='name'\n            type='text'\n            placeholder='Name'\n            value={name}\n            onChange={onChange}\n            className='form-input'\n            required\n          />\n        )}\n        {signup && (\n          <input\n            name='email'\n            type='email'\n            placeholder='Email'\n            value={email}\n            onChange={onChange}\n            className='form-input'\n            required\n          />\n        )}\n        {signup && (\n          <input\n            name='url'\n            type='url'\n            placeholder='Profile Image URL'\n            value={url}\n            onChange={onChange}\n            className='form-input'\n          />\n        )}\n        <div className='form-signup'>\n          <input\n            name='signup'\n            id='signup'\n            type='checkbox'\n            onChange={onChange}\n            checked={signup}\n          />\n          <label htmlFor='signup'> Create a new account?</label>\n        </div>\n        <button className='form-btn auth-form-btn' type='submit'>\n          {signup ? 'Sign Up' : 'Sign In'}\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default Login;\n","import {\n  createContext,\n  createRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useState,\n} from 'react';\nimport Header from '../components/Header';\nimport Login from '../pages/Login';\n\nconst AuthContext = createContext({});\n\nconst contextRef = createRef();\n\nexport function AuthProvider({ authService, authErrorEventBus, children }) {\n  const [user, setUser] = useState(undefined);\n\n  useImperativeHandle(contextRef, () => (user ? user.token : undefined));\n\n  useEffect(() => {\n    authErrorEventBus.listen((err) => {\n      console.log(err);\n      setUser(undefined);\n    });\n  }, [authErrorEventBus]);\n\n  useEffect(() => {\n    authService.me().then(setUser).catch(console.error);\n  }, [authService]);\n\n  const signUp = useCallback(\n    async (username, password, name, email, url) =>\n      authService\n        .signup(username, password, name, email, url)\n        .then((user) => setUser(user)),\n    [authService]\n  );\n\n  const logIn = useCallback(\n    async (username, password) =>\n      authService.login(username, password).then((user) => setUser(user)),\n    [authService]\n  );\n\n  const logout = useCallback(\n    async () => authService.logout().then(() => setUser(undefined)),\n    [authService]\n  );\n\n  const context = useMemo(\n    () => ({\n      user,\n      signUp,\n      logIn,\n      logout,\n    }),\n    [user, signUp, logIn, logout]\n  );\n\n  return (\n    <AuthContext.Provider value={context}>\n      {user ? (\n        children\n      ) : (\n        <div className='app'>\n          <Header />\n          <Login onSignUp={signUp} onLogin={logIn} />\n        </div>\n      )}\n    </AuthContext.Provider>\n  );\n}\n\nexport class AuthErrorEventBus {\n  listen(callback) {\n    this.callback = callback;\n  }\n  notify(error) {\n    this.callback(error);\n  }\n}\n\nexport default AuthContext;\nexport const fetchToken = () => contextRef.current;\nexport const useAuth = () => useContext(AuthContext);\n","import React, { memo, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Banner from './Banner';\nimport NewTweetForm from './NewTweetForm';\nimport TweetCard from './TweetCard';\nimport { useAuth } from '../context/AuthContext';\n\nconst Tweets = memo(({ tweetService, username, addable }) => {\n  const [tweets, setTweets] = useState([]);\n  const [error, setError] = useState('');\n  const history = useHistory();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    tweetService\n      .getTweets(username)\n      .then((tweets) => setTweets([...tweets]))\n      .catch(onError);\n\n    const stopSync = tweetService.onSync((tweet) => onCreated(tweet));\n    return () => stopSync();\n  }, [tweetService, username, user]);\n\n  const onCreated = (tweet) => {\n    setTweets((tweets) => [tweet, ...tweets]);\n  };\n\n  const onDelete = (tweetId) =>\n    tweetService\n      .deleteTweet(tweetId)\n      .then(() =>\n        setTweets((tweets) => tweets.filter((tweet) => tweet.id !== tweetId))\n      )\n      .catch((error) => setError(error.toString()));\n\n  const onUpdate = (tweetId, text) =>\n    tweetService\n      .updateTweet(tweetId, text)\n      .then((updated) =>\n        setTweets((tweets) =>\n          tweets.map((item) => (item.id === updated.id ? updated : item))\n        )\n      )\n      .catch((error) => error.toString());\n\n  const onUsernameClick = (tweet) => history.push(`/${tweet.username}`);\n\n  const onError = (error) => {\n    setError(error.toString());\n    setTimeout(() => {\n      setError('');\n    }, 3000);\n  };\n\n  return (\n    <>\n      {addable && (\n        <NewTweetForm tweetService={tweetService} onError={onError} />\n      )}\n      {error && <Banner text={error} isAlert={true} transient={true} />}\n      {tweets.length === 0 && <p className='tweets-empty'>No Tweets Yet</p>}\n      <ul className='tweets'>\n        {tweets.map((tweet) => (\n          <TweetCard\n            key={tweet.id}\n            tweet={tweet}\n            owner={tweet.username === user.username}\n            onDelete={onDelete}\n            onUpdate={onUpdate}\n            onUsernameClick={onUsernameClick}\n          />\n        ))}\n      </ul>\n    </>\n  );\n});\nexport default Tweets;\n","import React from 'react';\nimport Tweets from '../components/Tweets';\n\nconst AllTweets = ({ tweetService }) => (\n  <Tweets tweetService={tweetService} addable={true} />\n);\n\nexport default AllTweets;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport Tweets from '../components/Tweets';\n\nconst MyTweets = ({ tweetService }) => {\n  const { username } = useParams();\n  return (\n    <Tweets tweetService={tweetService} username={username} addable={false} />\n  );\n};\n\nexport default MyTweets;\n","import { Switch, Route, useHistory } from 'react-router-dom';\nimport Header from './components/Header';\nimport AllTweets from './pages/AllTweets';\nimport MyTweets from './pages/MyTweets';\nimport { useAuth } from './context/AuthContext';\n\nfunction App({ tweetService }) {\n  const history = useHistory();\n  const { user, logout } = useAuth();\n\n  const onAllTweets = () => {\n    history.push('/');\n  };\n\n  const onMyTweets = () => {\n    history.push(`/${user.username}`);\n  };\n\n  const onLogout = () => {\n    if (window.confirm('Do you want to log out?')) {\n      logout();\n      history.push('/');\n    }\n  };\n\n  return (\n    <div className='app'>\n      <Header\n        username={user.username}\n        onLogout={onLogout}\n        onAllTweets={onAllTweets}\n        onMyTweets={onMyTweets}\n      />\n      <Switch>\n        (\n        <>\n          <Route exact path='/'>\n            <AllTweets tweetService={tweetService} />\n          </Route>\n          <Route exact path='/:username'>\n            <MyTweets tweetService={tweetService} />\n          </Route>\n        </>\n        )\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","export default class AuthService {\n  constructor(http, tokenStorage) {\n    this.http = http;\n    this.tokenStorage = tokenStorage;\n  }\n\n  async signup(username, password, name, email, url) {\n    const data = await this.http.fetch(\"/auth/signup\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        username,\n        password,\n        name,\n        email,\n        url,\n      }),\n    });\n    this.tokenStorage.saveToken(data.token);\n    return data;\n  }\n\n  async login(username, password) {\n    const data = await this.http.fetch(\"/auth/signin\", {\n      method: \"POST\",\n      body: JSON.stringify({ username, password }),\n    });\n    this.tokenStorage.saveToken(data.token);\n    return data;\n  }\n\n  async me() {\n    const token = this.tokenStorage.getToken();\n    return this.http.fetch(\"/auth/me\", {\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${token}` },\n    });\n  }\n\n  async logout() {\n    this.tokenStorage.clearToken();\n  }\n}\n","export default class TweetService {\n  constructor(http, tokenStorage, socket) {\n    this.http = http;\n    this.tokenStorage = tokenStorage;\n    this.socket = socket;\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username=${username}` : \"\";\n    return this.http.fetch(`/tweets${query}`, {\n      method: \"GET\",\n      headers: this.getHeaders(),\n    });\n  }\n\n  async postTweet(text) {\n    return this.http.fetch(`/tweets`, {\n      method: \"POST\",\n      headers: this.getHeaders(),\n      body: JSON.stringify({ text, username: \"ellie\", name: \"Ellie\" }),\n    });\n  }\n\n  async deleteTweet(tweetId) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: \"DELETE\",\n      headers: this.getHeaders(),\n    });\n  }\n\n  async updateTweet(tweetId, text) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: \"PUT\",\n      headers: this.getHeaders(),\n      body: JSON.stringify({ text }),\n    });\n  }\n\n  getHeaders() {\n    const token = this.tokenStorage.getToken();\n    return {\n      Authorization: `Bearer ${token}`,\n    };\n  }\n\n  onSync(callback) {\n    return this.socket.onSync(\"tweets\", callback);\n  }\n}\n","export default class HttpClient {\n  constructor(baseURL, authErrorEventBus) {\n    this.baseURL = baseURL;\n    this.authErrorEventBus = authErrorEventBus;\n  }\n\n  async fetch(url, options) {\n    const res = await fetch(`${this.baseURL}${url}`, {\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options.headers,\n      },\n    });\n\n    let data;\n    try {\n      data = await res.json();\n    } catch (error) {\n      console.error(error);\n    }\n\n    if (res.status > 299 || res.status < 200) {\n      const message =\n        data && data.message ? data.message : \"Something went wrong!\";\n      const error = new Error(message);\n      if (res.status === 401) {\n        this.authErrorEventBus.notify(error);\n        return;\n      }\n      throw error;\n    }\n    return data;\n  }\n}\n","const TOKEN = \"token\";\n\nexport default class TokenStorage {\n  saveToken(token) {\n    localStorage.setItem(TOKEN, token);\n  }\n\n  getToken() {\n    return localStorage.getItem(TOKEN);\n  }\n\n  clearToken() {\n    localStorage.clear(TOKEN);\n  }\n}\n","import socket from \"socket.io-client\";\n\nexport default class Socket {\n  constructor(baseURL, getAccessToken) {\n    this.io = socket(baseURL, {\n      auth: (cb) => cb({ token: getAccessToken() }),\n    });\n\n    this.io.on(\"connect_error\", (err) => {\n      console.log(\"socket error\", err.message);\n    });\n  }\n\n  onSync(event, callback) {\n    if (!this.io.connected) {\n      this.io.connect();\n    }\n\n    this.io.on(event, (message) => callback(message));\n    return () => this.io.off(event);\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport AuthService from \"./service/auth\";\nimport TweetService from \"./service/tweet\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { AuthProvider } from \"./context/AuthContext\";\nimport { AuthErrorEventBus } from \"./context/AuthContext\";\nimport HttpClient from \"./network/http\";\nimport TokenStorage from \"./db/token.js\";\nimport Socket from \"./network/socket.js\";\n\nconst baseURL = process.env.REACT_APP_BASE_URL;\nconst tokenStorage = new TokenStorage();\nconst authErrorEventBus = new AuthErrorEventBus();\nconst httpClient = new HttpClient(baseURL, authErrorEventBus);\nconst authService = new AuthService(httpClient, tokenStorage);\nconst socketClient = new Socket(baseURL, () => tokenStorage.getToken());\nconst tweetService = new TweetService(httpClient, tokenStorage, socketClient);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <AuthProvider\n        authService={authService}\n        authErrorEventBus={authErrorEventBus}\n      >\n        <App tweetService={tweetService} />\n      </AuthProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}